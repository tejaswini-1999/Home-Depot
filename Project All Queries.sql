--Q1 Final

WITH RETURNING_CUSTOMERS AS ( 
SELECT CUSTOMERID, COUNT(DISTINCT ORDERID) AS NO_OF_ORDERS, QUARTER, STOREID  
FROM (SELECT ORDERID, CUSTOMERID, STOREID,
    (CASE WHEN EXTRACT(MONTH FROM ORDERDATE) BETWEEN 01 AND 03 THEN 'Q1' 
        WHEN EXTRACT(MONTH FROM ORDERDATE) BETWEEN 04 AND 06 THEN 'Q2' 
        WHEN EXTRACT(MONTH FROM ORDERDATE) BETWEEN 07 AND 09 THEN 'Q3' 
        ELSE 'Q4' END) AS QUARTER 
    FROM ORDERS) ORDER_QUARTER 
WHERE STOREID IS NOT NULL 
GROUP BY CUSTOMERID, QUARTER, STOREID 
HAVING COUNT(ORDERID) > 1 
ORDER BY CUSTOMERID) 

SELECT CITY, RC.STOREID AS STORE, COUNT(RC.CUSTOMERID) AS CUSTOMERCOUNT 
FROM RETURNING_CUSTOMERS RC  
JOIN STORE S ON RC.STOREID = S.STOREID 
GROUP BY CITY, RC.STOREID
ORDER BY CUSTOMERCOUNT DESC;



-- Q2 Final
WITH TOPPRODUCTS AS (  
SELECT C.C_NAME AS CATEGORYNAME, P.P_NAME AS PRODUCTNAME, 
TO_CHAR(SUM((OD.UNIT_PRICE * OD.QUANTITY) * (1 - NVL(PR.DISCOUNT_AMOUNT / 100, 0)) * (1 + P.TAX)), '$9,999,999.99') SALES, 
COUNT(O.ORDERID) AS TOTAL_ORDERS,  
FLOOR(AVG(DELIVERY_DATE - ORDERDATE)) AVG_FULFILLMENT_TIME,  
RANK() OVER ( PARTITION BY C.C_NAME ORDER BY SUM((OD.UNIT_PRICE * OD.QUANTITY) * (1 - NVL(PR.DISCOUNT_AMOUNT / 100, 0)) * (1 + P.TAX)) DESC, AVG(DELIVERY_DATE - ORDERDATE) ASC) RNK  
FROM PRODUCT P 
JOIN SUBCATEGORY SC ON P.SUB_CATEGORY_ID =  SC.SUB_CATEGORY_ID    
JOIN PRODUCTCATEGORY C ON SC.CATEGORYID = C.CATEGORYID   
JOIN ORDER_DETAILS OD ON P.PRODUCTID = OD.PRODUCTID  
JOIN ORDERS O ON OD.ORDERID = O.ORDERID
JOIN PROMOTIONS PR ON P.PRODUCTID = PR.PRODUCTID
JOIN DELIVERY D ON D.ORDER_ID = O.ORDERID  
WHERE EXTRACT(YEAR FROM O.ORDERDATE) = EXTRACT(YEAR FROM SYSDATE) 
AND ORDER_FLAG = 'Online' AND ORDERSTATUS = 'Confirmed'
GROUP BY C.C_NAME, P.P_NAME  
ORDER BY 1,3 DESC) 
SELECT * FROM TOPPRODUCTS WHERE RNK <=3;



-- Q3 Final
SELECT  C.CustomerID, C.First_Name,  C.Last_Name 
FROM CUSTOMER C 
WHERE EXISTS ( 
SELECT 1 
FROM ORDERS O 
JOIN ORDER_DETAILS OD ON O.OrderID = 	 
OD.OrderID 
JOIN PRODUCT P ON OD.ProductID = P.ProductID 
LEFT JOIN PROMOTIONS PR ON P.ProductID = 	 
PR.ProductID 
WHERE O.CustomerID = C.CustomerID 
GROUP BY O.CustomerID 
HAVING SUM(OD.Unit_Price * OD.Quantity * (1 - NVL(PR.Discount_Amount / 100, 0)) * 
(1 + P.Tax)) > ALL (
    SELECT 
    SUM(OD2.Unit_Price * OD2.Quantity * (1 - NVL(PR2.Discount_Amount / 100, 0)) * 				(1 + P2.Tax)) 
    FROM ORDERS O2 
    JOIN ORDER_DETAILS OD2 ON O2.OrderID = OD2.OrderID 
    JOIN PRODUCT P2 ON OD2.ProductID = P2.ProductID 
    LEFT JOIN PROMOTIONS PR2 ON P2.ProductID = PR2.ProductID 
    WHERE O2.CustomerID != C.CustomerID 
    GROUP BY O2.CustomerID)); 




-- Q4 Final

WITH DAILYSALES AS ( 
    SELECT TO_DATE(ORDERDATE,'DD-MON-YYYY') AS ORDERDATE, 
    SUM((OD.UNIT_PRICE * OD.QUANTITY) * (1 - NVL(PR.DISCOUNT_AMOUNT / 100, 0)) * (1 + P.TAX)) AS DAILY_SALES 
    FROM ORDER_DETAILS OD 
    JOIN ORDERS O ON OD.ORDERID = O.ORDERID 
    LEFT JOIN PROMOTIONS PR ON OD.PRODUCTID = PR.PRODUCTID 
    LEFT JOIN PRODUCT P ON OD.PRODUCTID = P.PRODUCTID 
    GROUP BY TO_DATE(ORDERDATE,'DD-MON-YYYY')), 
 
DAILYSALESWITHPREVDAY AS ( 
    SELECT ORDERDATE, DAILY_SALES, 
    LAG(DAILY_SALES) OVER (ORDER BY ORDERDATE) AS PREV_SALES 
    FROM DAILYSALES) 
 
SELECT ORDERDATE, 
TO_CHAR(DAILY_SALES, '$99,999,999.99') AS DAILY_SALES, 
TO_CHAR(NVL(PREV_SALES, '0'), '$99,999,990.99') AS PREV_SALES, 
TO_CHAR(NVL((DAILY_SALES - PREV_SALES) / NVL(PREV_SALES, 1) * 100,'0'),'FM9999999990.00') || '%' AS PERCENTAGE_INCREASE 
FROM DAILYSALESWITHPREVDAY; 


-- Q5 Final

WITH REV AS (SELECT P.PRODUCTID,P_NAME,
(CASE WHEN UPPER(REVIEW_DESCRIPTION) LIKE UPPER('%BAD%') OR  
    UPPER(REVIEW_DESCRIPTION) LIKE '%WASTE%' OR 
    UPPER(REVIEW_DESCRIPTION) LIKE '%PATHETIC%' OR 
    UPPER(REVIEW_DESCRIPTION) LIKE '%WORST%' THEN 'NEGATIVE' 
    WHEN UPPER(REVIEW_DESCRIPTION) LIKE '%GOOD%' OR  
    UPPER(REVIEW_DESCRIPTION) LIKE '%GREAT%' OR 
    UPPER(REVIEW_DESCRIPTION) LIKE '%EXCELLENT%' OR 
    UPPER(REVIEW_DESCRIPTION) LIKE '%BEST%' OR 
    UPPER(REVIEW_DESCRIPTION) LIKE '%FANTASTIC%' OR
    UPPER(REVIEW_DESCRIPTION) LIKE '%AMAZING%' THEN 'POSITIVE'
    END) AS REVIEW_TYPE 
FROM REVIEWS R
JOIN PRODUCT P ON P.PRODUCTID = R.PRODUCTID) 

SELECT P_NAME, P_COUNT_REV AS POSITIVE_REVIEWS, N_COUNT_REV AS NEGATIVE_REVIEWS,
(CASE WHEN P_COUNT_REV/(P_COUNT_REV + N_COUNT_REV) >= 0.6 THEN 'GOOD QUALITY'
    WHEN N_COUNT_REV/(P_COUNT_REV + N_COUNT_REV) >= 0.6 THEN 'BAD QUALITY'
    ELSE 'NEUTRAL' END) AS QUALITY 
FROM REV
PIVOT ( 
    COUNT(PRODUCTID) AS COUNT_REV 
    FOR REVIEW_TYPE IN ('POSITIVE' AS P, 'NEGATIVE' AS N))
ORDER BY POSITIVE_REVIEWS DESC;


-- Q6 Final
WITH STORE_COMBINE AS (
    SELECT * FROM FORM_CASHIER UNION 
    SELECT * FROM FORM_MANAGERS UNION 
    SELECT * FROM FORM_ATTENDANTS )
    
    SELECT DISTINCT C_NAME
    FROM PRODUCTCATEGORY PC 
    WHERE PC.CATEGORYID IN (  
    SELECT C.CATEGORYID
    FROM STORE_COMBINE ST
    JOIN SHIFT_CREW SC ON ST.SHIFT_CREWID = SC.SHIFT_CREWID 
    JOIN CREW_STORE CS ON SC.SHIFT_CREWID = CS.SHIFT_CREWID
    JOIN STORE S ON S.STOREID = CS.STOREID  
    JOIN STORE_AVAILABILITY SA ON S.STOREID = SA.STOREID  
    JOIN PRODUCT P ON SA.PRODUCTID = P.PRODUCTID  
    JOIN SUBCATEGORY SUB ON P.SUB_CATEGORY_ID =  SUB.SUB_CATEGORY_ID     
    JOIN PRODUCTCATEGORY C ON SUB.CATEGORYID = C.CATEGORYID    
    JOIN ORDER_DETAILS OD ON P.PRODUCTID = OD.PRODUCTID   
    JOIN ORDERS O ON OD.ORDERID = O.ORDERID 
    JOIN PROMOTIONS PR ON P.PRODUCTID = PR.PRODUCTID  
    WHERE TO_DATE(ORDERDATE) >= ADD_MONTHS(SYSDATE, -6)
    AND PR.DISCOUNT_AMOUNT > 10 AND STATUS = 'Active'
    AND S.STOREID = 'S001');


-- Q7 Final

WITH PRODUCTSUMMARY AS (
    SELECT P.PRODUCTID, P.MODEL_NO AS "Model Number", P.P_NAME AS "Product Name", P.BRAND,
        COUNT(DISTINCT EO.REQUESTID) AS EXCHANGE_COUNT,
        COUNT(DISTINCT RC.REQUESTID) AS RETURN_COUNT,
        NVL(SUM(R.REFUND_AMOUNT), 0) AS TOTAL_REFUND_AMOUNT
    FROM PRODUCT P
        LEFT JOIN POST_ORDER_STATUS POS ON P.PRODUCTID = POS.PRODUCTID
        LEFT JOIN EXCHANGE_ORDERS EO ON POS.REQUESTID = EO.REQUESTID
        LEFT JOIN RETURN_CANCEL RC ON POS.REQUESTID = RC.REQUESTID
        LEFT JOIN REFUND R ON RC.REFUNDID = R.REFUNDID
    GROUP BY P.PRODUCTID, P.MODEL_NO, P.P_NAME, P.BRAND
)
SELECT PRODUCTID, "Model Number", "Product Name", BRAND, EXCHANGE_COUNT, RETURN_COUNT, TOTAL_REFUND_AMOUNT
FROM PRODUCTSUMMARY
ORDER BY (EXCHANGE_COUNT + RETURN_COUNT) DESC
FETCH FIRST 3 ROWS ONLY;


-- Q8 Final
WITH EMPLOYEEPERFORMANCE AS( 
    SELECT E.F_NAME, E.L_NAME, SUM(FINALAMOUNT) AS TOTALSALES 
    FROM EMPLOYEES E 
    JOIN CASHIER C ON E.EMPLOYEE_ID = C.EMPLOYEEID
    JOIN PAYMENTS P ON E.EMPLOYEE_ID = P.EMPLOYEEID
    GROUP BY E.F_NAME, E.L_NAME),

OVERALLAVERAGEPERFORMANCE AS ( 
    SELECT SUM(FINALAMOUNT) AS OVERALLSALES 
        FROM EMPLOYEES E 
        JOIN CASHIER C ON E.EMPLOYEE_ID = C.EMPLOYEEID
        JOIN PAYMENTS P ON E.EMPLOYEE_ID = P.EMPLOYEEID) 

SELECT EP.F_NAME AS EMPLOYEEFIRSTNAME, EP.L_NAME AS EMPLOYEELASTNAME, 
CONCAT(ROUND(((OAP.OVERALLSALES - EP.TOTALSALES) / OAP.OVERALLSALES) * 100,2), '%') AS PERFORMANCEDIFFERENCEPERCENTAGE 
FROM EMPLOYEEPERFORMANCE EP 
JOIN OVERALLAVERAGEPERFORMANCE OAP ON 1=1;


-- Q9

WITH CATEGORY_INFO AS (
SELECT O.CUSTOMERID, O.ORDERID, SC.CATEGORYID, PC.C_NAME,
SUM(OD.QUANTITY * OD.UNIT_PRICE) AS CATEGORY_REVENUE,
DENSE_RANK() OVER (PARTITION BY O.CUSTOMERID ORDER BY SUM(OD.QUANTITY * OD.UNIT_PRICE) DESC) AS RANK_CATEGORY
FROM ORDERS O
JOIN ORDER_DETAILS OD ON OD.ORDERID = O.ORDERID
JOIN PRODUCT P ON OD.PRODUCTID = P.PRODUCTID
JOIN SUBCATEGORY SC ON P.SUB_CATEGORY_ID = SC.SUB_CATEGORY_ID
JOIN PRODUCTCATEGORY PC ON PC.CATEGORYID = SC.CATEGORYID
WHERE UPPER(O.ORDER_FLAG) = 'ONLINE'
GROUP BY O.ORDERID, O.CUSTOMERID, SC.CATEGORYID, PC.C_NAME
ORDER BY O.CUSTOMERID
)
 
SELECT CI.CUSTOMERID,
SUM(OD.QUANTITY * OD.UNIT_PRICE) AS ORDER_TOTAL,
ROUND(AVG(D.DELIVERY_DATE - CAST(O.ORDERDATE AS DATE)),3) AS AVG_DELIVERY_TIME,
CI.C_NAME, CI.CATEGORY_REVENUE,
CONCAT(ROUND((CI.CATEGORY_REVENUE/SUM(OD.QUANTITY * OD.UNIT_PRICE)) * 100,2),'%') AS SPENT_PERCENT 
FROM CATEGORY_INFO CI
JOIN ORDER_DETAILS OD ON OD.ORDERID = CI.ORDERID
JOIN DELIVERY D ON D.ORDER_ID = OD.ORDERID
JOIN ORDERS O ON O.ORDERID = OD.ORDERID
WHERE CI.RANK_CATEGORY = 1
GROUP BY CI.CUSTOMERID, CI.C_NAME, CI.CATEGORY_REVENUE
ORDER BY ORDER_TOTAL DESC
FETCH FIRST 5 ROWS WITH TIES;



-- Q10 Final
SELECT PRODUCTID, STOCK_DATE, TO_CHAR(CURRENT_QUANTITY) CURRENT_QUANTITY, 
TO_CHAR(PREVIOUS_QUANTITY) PREVIOUS_QUANTITY, 
COALESCE(TO_CHAR(FORMER_QUANTITY), 'NA') FORMER_QUANTITY,
COALESCE(TO_CHAR((CURRENT_QUANTITY - PREVIOUS_QUANTITY)), 'NA') AS DIFFERENCE,
COALESCE(ROUND(((CURRENT_QUANTITY - PREVIOUS_QUANTITY)/PREVIOUS_QUANTITY*100),2),0) || '%' AS PERCENT_CHANGE
FROM (
    SELECT PRODUCTID, STOCK_DATE, QUANTITY AS CURRENT_QUANTITY,
    LAG(QUANTITY) OVER (PARTITION BY PRODUCTID ORDER BY STOCK_DATE) AS PREVIOUS_QUANTITY,
    LAG(QUANTITY, 2) OVER (PARTITION BY PRODUCTID ORDER BY STOCK_DATE) AS FORMER_QUANTITY
    FROM STOCK 
    ORDER BY PRODUCTID, STOCK_DATE)
WHERE PREVIOUS_QUANTITY IS NOT NULL;


-- Q11 Final
WITH STORE_PRODS AS (
    SELECT P_NAME, SP.PRODUCTID
    FROM STORE_PRODUCT SP
    JOIN PRODUCT P ON SP.PRODUCTID = P.PRODUCTID
    MINUS
    SELECT P_NAME, OP.PRODUCTID
    FROM ONLINE_PRODUCT OP
    JOIN PRODUCT P ON OP.PRODUCTID = P.PRODUCTID),
    
ONLINE_PRODS AS (
    SELECT P_NAME, OP.PRODUCTID
    FROM ONLINE_PRODUCT OP
    JOIN PRODUCT P ON OP.PRODUCTID = P.PRODUCTID
    MINUS
    SELECT P_NAME, SP.PRODUCTID
    FROM STORE_PRODUCT SP
    JOIN PRODUCT P ON SP.PRODUCTID = P.PRODUCTID)
 
SELECT 'Store', PRODUCTID, P_NAME FROM STORE_PRODS
UNION
SELECT 'Online', PRODUCTID, P_NAME  FROM ONLINE_PRODS;


-- Q12 Final

SELECT SC_NAME AS SUBCATEGORY_NAME, SUM(OD.QUANTITY) AS TOTAL_QUANTITY_SOLD, 
TO_CHAR(SUM(OD.QUANTITY * OD.UNIT_PRICE), '$999,999,999.99') AS TOTAL_REVENUE, 
CONCAT(ROUND((SUM(OD.QUANTITY * OD.UNIT_PRICE) / (SELECT SUM(OD.QUANTITY * OD.UNIT_PRICE) 
    FROM PRODUCTCATEGORY PC 
    JOIN SUBCATEGORY SC ON PC.CATEGORYID = SC.CATEGORYID 
    JOIN PRODUCT P ON P.SUB_CATEGORY_ID = SC.SUB_CATEGORY_ID 
    JOIN ORDER_DETAILS OD ON P.PRODUCTID = OD.PRODUCTID 
    JOIN ORDERS O ON OD.ORDERID = O.ORDERID)),4) * 100, '%') AS REVENUE_PERCENTAGE 
FROM PRODUCTCATEGORY PC 
JOIN SUBCATEGORY SC ON PC.CATEGORYID = SC.CATEGORYID 
JOIN PRODUCT P ON P.SUB_CATEGORY_ID = SC.SUB_CATEGORY_ID 
JOIN ORDER_DETAILS OD ON P.PRODUCTID = OD.PRODUCTID 
JOIN ORDERS O ON OD.ORDERID = O.ORDERID 
GROUP BY ROLLUP (SC_NAME) 
HAVING SC_NAME IS NOT NULL 
ORDER BY REVENUE_PERCENTAGE DESC;

------------------------------------------------------------------------------------



CREATE TABLE W_PAYMENT5 
   (	
	W_PAYMENTID VARCHAR2(6) CONSTRAINT WPAYMENT_PK4 PRIMARY KEY,
	W_PAYMENTDATE TIMESTAMP (6), 
	W_PAYMENT_AMOUNT NUMBER (10,2), 
	W_PAYMENTSTATUS VARCHAR2(20), 
	W_PAYMENTTYPE VARCHAR2(10), 
	W_PAYMENTMETHOD VARCHAR2(50), 
	W_ORDERSTATUS VARCHAR2(20), 
	EMPLOYEE_ID VARCHAR2(10), 
	WAREHOUSEID VARCHAR2(10),
	CONSTRAINT W_PAYMENT_AMOUNT_CHECK4 CHECK (W_PAYMENT_AMOUNT > 0),
	CONSTRAINT W_PAYMENTSTATUS_CHECK4 CHECK (W_PAYMENTSTATUS IN ('Paid', 'Pending', 'Failed', 'Cancelled')),
	CONSTRAINT W_PAYMENTTYPE_CHECK4 CHECK (W_PAYMENTTYPE IN ('Sale', 'Refund')),
	CONSTRAINT W_PAYMENTMETHOD_CHECK4 CHECK (W_PAYMENTMETHOD IN ('Credit Card', 		'PayPal', 'Cash')),
	CONSTRAINT W_EMP_FK4 FOREIGN KEY (EMPLOYEE_ID, WAREHOUSEID) REFERENCES W_EMPLOYEE,
	CONSTRAINT W_WARE_FK4 FOREIGN KEY (WAREHOUSEID) REFERENCES W_WAREHOUSES (WAREHOUSEID),
	CONSTRAINT ORD_STATUS_CHK4 CHECK (W_ORDERSTATUS in ('Shipped', 'Pending', 'Cancelled', 'Delivered')) 
   );

SELECT EMPLOYEE_ID FROM W_EMPLOYEE;




CREATE TABLE W_PAYMENT (
    W_PAYMENTID VARCHAR2(6) CONSTRAINT WPAYMENT_PK PRIMARY KEY,
    W_PAYMENTDATE TIMESTAMP (6),
    W_PAYMENT_AMOUNT NUMBER (10,2) CONSTRAINT W_PAYMENT_AMOUNT_CHECK CHECK (W_PAYMENT_AMOUNT > 0),
    W_PAYMENTSTATUS VARCHAR2(20) CONSTRAINT W_PAYMENTSTATUS_CHECK CHECK (W_PAYMENTSTATUS IN ('Paid','Pending', 'Failed', 'Cancelled')),
    W_PAYMENTTYPE VARCHAR2(10) CONSTRAINT W_PAYMENTTYPE_CHECK CHECK (W_PAYMENTTYPE IN ('Sale', 'Refund')),
    W_PAYMENTMETHOD VARCHAR2(50) CONSTRAINT W_PAYMENTMETHOD_CHECK CHECK (W_PAYMENTMETHOD IN ('Credit Card','PayPal', 'Cash')),
    W_ORDERSTATUS VARCHAR2(20) CONSTRAINT ORD_STATUS_CHK CHECK (W_ORDERSTATUS in ('Shipped', 'Pending', 'Cancelled', 'Delivered')),
    EMPLOYEEID VARCHAR2(10),
    WAREHOUSEID VARCHAR2(10),
    CONSTRAINT W_EMP_FK FOREIGN KEY (EMPLOYEEID, WAREHOUSEID) REFERENCES W_EMPLOYEE (EMPLOYEE_ID, WAREHOUSEID),
    CONSTRAINT W_WARE_FK FOREIGN KEY (WAREHOUSEID) REFERENCES WAREHOUSES (WAREHOUSEID)
);

    